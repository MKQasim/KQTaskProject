//
//  KQHomePresenterTests.swift
//  KQTaskProject
//
//  Created by KamsQue on 24/12/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import KQTaskProject
import XCTest

class KQHomePresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: KQHomePresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupKQHomePresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupKQHomePresenter()
    {
        sut = KQHomePresenter()
    }
    
    // MARK: Test doubles
    
    class KQHomeDisplayLogicSpy: KQHomeDisplayLogic
    {
        
        
      
        
        // MARK: Method call expectations
        
        var displayFetchedUsersCalled = false
        var urlSessionisValid = false
        var urlSessionInvalidated = false
        var presenApiNetworkError = false
        // MARK: Argument expectations
        
        var viewModel: KQHome.HomeUsers.ViewModel!
        
        // MARK: Spied methods
        
        func displayFetchedUsers(viewModel: KQTaskProject.KQHome.HomeUsers.ViewModel) {
            displayFetchedUsersCalled = true
            self.viewModel = viewModel
        }
        
        func checkApiUrlSerssion(isCanceled: Bool) {
            if isCanceled{
                urlSessionInvalidated = true
            }else{
                urlSessionisValid = false
            }
        }
        
        func presenApiNetworkError(message: String?) {
            presenApiNetworkError = true
        }
        
    }
    
    // MARK: Tests
    
    func testPresentFetchedUsersShouldAskViewControllerToDisplayFetchedUsers()
    {
        // Given
        let listKQHomeDisplayLogicSpy = KQHomeDisplayLogicSpy()
        sut.viewController = listKQHomeDisplayLogicSpy
        
        // When
        let users = [User(login: "Login",url: "google.com")]
        let response = KQHome.HomeUsers.Response(homeUsers: users)
        sut.presentUsers(response: response)
        
        // Then
        XCTAssert(listKQHomeDisplayLogicSpy.displayFetchedUsersCalled, "Presenting fetched users should ask view controller to display them")
    }
    
    func testValidateSuccessUrlSessionIfStartedBeforeMovingNextScreenDuringIfPaginationImplimented()
    {
        // Given
        let listKQHomeDisplayLogicSpy = KQHomeDisplayLogicSpy()
        sut.viewController = listKQHomeDisplayLogicSpy
        let isInvalidate = true
        // When
        
        sut.checkApiUrlSerssion(isCanceled: isInvalidate)
        // Then
        XCTAssertTrue(listKQHomeDisplayLogicSpy.urlSessionInvalidated, "Presenting fetched users should ask view controller to check url Session Validation Success")
    }
    
    
    func testValidateErrorUrlSessionIfStartedBeforeMovingNextScreenDuringIfPaginationImplimented()
    {
        // Given
        let listKQHomeDisplayLogicSpy = KQHomeDisplayLogicSpy()
        sut.viewController = listKQHomeDisplayLogicSpy
        let isInvalidate = false
        // When
        sut.checkApiUrlSerssion(isCanceled: isInvalidate)
        // Then
        XCTAssertFalse(listKQHomeDisplayLogicSpy.urlSessionisValid, "Presenting fetched users should ask view controller to check urlSession Validation Success")
    }
    
    
    func testshowApiNetworkError()
    {
        // Given
        let listKQHomeDisplayLogicSpy = KQHomeDisplayLogicSpy()
        sut.viewController = listKQHomeDisplayLogicSpy
        let message = "Error Message"
        // When
        sut.presenApiNetworkError(message: message)
        // Then
        XCTAssertFalse(listKQHomeDisplayLogicSpy.urlSessionisValid, "Show Error Message to ViewController")
    }
}
