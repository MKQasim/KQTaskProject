//
//  KQUserDetailsViewControllerTests.swift
//  KQTaskProject
//
//  Created by KamsQue on 25/12/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import KQTaskProject
import XCTest

class KQUserDetailsViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: KQUserDetailsViewController!
    var window: UIWindow!
    var userDetails: UserDetails?
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        window.rootViewController = UINavigationController(rootViewController: KQUserDetailsViewController())
        window.makeKeyAndVisible()
        setupKQUserDetailsViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupKQUserDetailsViewController()
    {
        sut = KQUserDetailsViewController()
        sut.viewDidLoad()
        sut.viewWillAppear(true)
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class KQUserDetailsBusinessLogicSpy: KQUserDetailsBusinessLogic
    {
        var users: [User]?
        
        // MARK: Method call expectations
        
        var fetchUsersDetailsCalled = false
        var displayUsersDetailsCalled = false
        var displayValidationError = false
        var displayValidationSuccess = false
        var isCheckApiUrlSerssion = false
        // MARK: Spied methods
        
        func displayUserData(response:KQUserDetailsModels.Model.Response) {
            displayUsersDetailsCalled = true
        }
        
        func getUserDetailsApi(request: KQUserDetailsModels.Model.Request) {
            fetchUsersDetailsCalled = true
        }
        
        func checkApiUrlSerssion() {
            isCheckApiUrlSerssion = true
        }
    }
    
    // MARK: Tests
    
    
    
    func testShouldFetchUsersWhenViewWillAppear()
    {
        // Given
        let kqKQUserDetailsBusinessLogicSpy = KQUserDetailsBusinessLogicSpy()
        sut.interactor = kqKQUserDetailsBusinessLogicSpy
        loadView()
        
        // When
        sut.getUserDetailsApiCall(selectedUser: sut.selectedUser)
        
        // Then
        XCTAssert(kqKQUserDetailsBusinessLogicSpy.fetchUsersDetailsCalled, "Should fetch Users right after the view appears")
    }
    
    func testValidateErrorUrlSessionIfStartedBeforeMovingNextScreenDuringIfPaginationImplimented()
    {
        // Given
        let kqKQUserDetailsBusinessLogicSpy = KQUserDetailsBusinessLogicSpy()
        sut.interactor = kqKQUserDetailsBusinessLogicSpy
        loadView()
        // When
        sut.checkApiUrlSerssion()
        // Then
        XCTAssertTrue(kqKQUserDetailsBusinessLogicSpy.isCheckApiUrlSerssion, "Presenting fetched users should ask view controller to check urlSession Validation Success")
    }
    
    
    func testDisplayUserShouldUpdateLabelText()
    {
        // Given
        let showUserBusinessLogicSpy = KQUserDetailsBusinessLogicSpy()
        sut.interactor = showUserBusinessLogicSpy
        loadView()
        userDetails = UserDetails(name: "MyName",twitterUsername: "Twitter Name")
        let viewModel = KQUserDetailsModels.Model.ViewModel(selectedUser: User(login: "Login",url: "www.google.com"), userDetails:userDetails)
        // When
        sut.displayUserDetails(viewModel: viewModel)
        // Then
        
           let expectation = expectation(description: "TextMatching")
           
           DispatchQueue.main.asyncAfter(deadline: .now() + 1.5, execute: {
               //then
               XCTAssertEqual(self.sut.nameLabel.text, "MyName", "Displaying an user should update the name label")
               XCTAssertEqual(self.sut.jobTitleDetailedLabel.text, "Twitter Name", "Displaying an user should update the  jobTitleDetailedlabel")
               
               expectation.fulfill()
           })
           wait(for: [expectation], timeout: 2.0)
        
    }
    
}
