//
//  KQUserDetailsPresenterTests.swift
//  KQTaskProject
//
//  Created by KamsQue on 25/12/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import KQTaskProject
import XCTest

class KQUserDetailsPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: KQUserDetailsPresenter!
    var userDetails: UserDetails?
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupKQUserDetailsPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupKQUserDetailsPresenter()
    {
        sut = KQUserDetailsPresenter()
    }
    
    // MARK: Test doubles
    
    class KQUserDetailsDisplayLogicSpy: KQUserDetailsDisplayLogic
    {
        
        
        // MARK: Method call expectations
        
        var displayUsersDetailsCalled = false
        var displayValidationError = false
        var displayValidationSuccess = false
        var urlSessionisValid = false
        var urlSessionInvalidated = false
        var presenApiNetworkError = false
        
        // MARK: Spied methods
        
        func displayUserDetails(viewModel: KQUserDetailsModels.Model.ViewModel) {
            displayUsersDetailsCalled = true
        }
        
        func displayValidationError(isValidated: Bool) {
            if isValidated{
                displayValidationSuccess = isValidated
            }else{
                displayValidationError = isValidated
            }
        }
        
        func checkApiUrlSerssion(isCanceled: Bool) {
            if isCanceled{
                urlSessionInvalidated = true
            }else{
                urlSessionisValid = false
            }
        }
        
        func presenApiNetworkError(message: String?) {
            presenApiNetworkError = true
        }
    }
    
    // MARK: Tests
    
    
    func testPresentFetchedUsersValidationErrorShouldAskViewControllerToDisplayFetchedUsers()
    {
        // Given
        let listKQUserDetailsDisplayLogicSpy = KQUserDetailsDisplayLogicSpy()
        sut.viewController = listKQUserDetailsDisplayLogicSpy
        
        // When
        let isValidated = false
        sut.presentRequestValidationError(isValidated: isValidated)
        // Then
        XCTAssertFalse(listKQUserDetailsDisplayLogicSpy.displayValidationError, "Presenting fetched users should ask view controller to display Validation Error")
    }
   
    
    func testPresentFetchedUsersValidationSuccessShouldAskViewControllerToDisplayFetchedUsers()
    {
        // Given
        let listKQUserDetailsDisplayLogicSpy = KQUserDetailsDisplayLogicSpy()
        sut.viewController = listKQUserDetailsDisplayLogicSpy
        
        // When
        let isValidated = true
        sut.presentRequestValidationError(isValidated: isValidated)
        // Then
        XCTAssertTrue(listKQUserDetailsDisplayLogicSpy.displayValidationSuccess, "Presenting fetched users should ask view controller to display Validation Success")
    }
    
    func testValidateSuccessUrlSessionIfStartedBeforeMovingNextScreenDuringIfPaginationImplimented()
    {
        // Given
        let listKQUserDetailsDisplayLogicSpy = KQUserDetailsDisplayLogicSpy()
        sut.viewController = listKQUserDetailsDisplayLogicSpy
        
        // When
        let isInvalidate = true
        sut.checkApiUrlSerssion(isCanceled: isInvalidate)
        // Then
        XCTAssertTrue(listKQUserDetailsDisplayLogicSpy.urlSessionInvalidated, "Presenting fetched users should ask view controller to check url Session Validation Success")
    }
    
    
    func testValidateErrorUrlSessionIfStartedBeforeMovingNextScreenDuringIfPaginationImplimented()
    {
        // Given
        let listKQUserDetailsDisplayLogicSpy = KQUserDetailsDisplayLogicSpy()
        sut.viewController = listKQUserDetailsDisplayLogicSpy
        
        // When
        let isInvalidate = false
        sut.checkApiUrlSerssion(isCanceled: isInvalidate)
        // Then
        XCTAssertFalse(listKQUserDetailsDisplayLogicSpy.urlSessionisValid, "Presenting fetched users should ask view controller to check urlSession Validation Success")
    }
    
    func testPresentFetchedUsersShouldAskViewControllerToDisplayFetchedUsers()
    {
        // Given
        let listKQUserDetailsDisplayLogicSpy = KQUserDetailsDisplayLogicSpy()
        sut.viewController = listKQUserDetailsDisplayLogicSpy
        
        // When
        userDetails = UserDetails(twitterUsername: "Twitter Name",updatedAt: Date())
        let viewModel = KQUserDetailsModels.Model.ViewModel(selectedUser: User(login: "Login",url: "www.google.com"), userDetails:userDetails)
        let response = KQUserDetailsModels.Model.Response(selectedUser: viewModel.selectedUser, userDetails: viewModel.userDetails)
        sut.presentUserDetails(response: response)
        
        // Then
        XCTAssert(listKQUserDetailsDisplayLogicSpy.displayUsersDetailsCalled, "Presenting fetched users should ask view controller to display them")
    }
}
